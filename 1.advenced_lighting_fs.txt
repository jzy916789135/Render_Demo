#version 330 core
out vec4 FragColor;
in VS_OUT {
    vec3 FragPos;
    vec3 Normal;
    vec2 TexCoords;
} fs_in;

uniform sampler2D floorTexture;
uniform vec3 lightPos;
uniform vec3 viewPos;
uniform bool blinn;

void main()
{
    vec3 color = texture(floorTexture,fs_in.TexCoords).rgb;

    vec3 ambient = 0.05f * color;

    vec3 lightDir = normalize(lightPos - fs_in.FragPos);
    vec3 normal = normalize(fs_in.Normal);
    float diff = (dot(lightDir,normal),0.0);
    vec3 diffuse = diff * color;

    vec3 viewDir = normalize(viewPos - fs_in.FragPos);
    vec3 reflectDir = reflect(-lightDir,normal);
    float spec = 0.0;
    if(blinn)
    {

        vec3 halfwayDir = normalize(lightDir + viewDir);
        spec = pow(max(dot(normalize(halfwayDir),normal),0.0),32);
    }
    else
    {
        spec = pow(max(dot(reflectDir,viewDir),0.0),32);
    }
    vec3 specular = spec * vec3(0.3f);
    //vec3 specular = spec * color;
    FragColor = vec4((ambient + diffuse + specular),1.0);
}